# -*- coding: utf-8 -*-
"""Contextos_DERIVADAS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SWNc26Dypofr0et3-CrGKnFTel5rhDpT
"""

pip install https://github.com/clips/pattern/archive/master.zip



from pattern.es import conjugate, PRESENT, PAST, FUTURE, INDICATIVE, IMPERATIVE, SUBJUNCTIVE, CONDITIONAL
!pip install pattern
!pip install PyDictionary
!pip install unidecode
from docx import Document
import time
import nltk
import re
import json
import string
from unidecode import unidecode
import pandas as pd
import numpy as np
#from google.colab import files
#files.upload()
#df = pd.read_csv("Verbos encolumnados.csv", encoding='latin-1')
#


def load_pet(filename):
    with open(filename, encoding = "latin1") as f:
        pet = json.loads(f.read())
    return pet

def conjugacion_ar(y):
    derivatives=[]
    derivatives.append(y)
    singular_person=3
    tense="present"
    mode="indicative"
    conjugation=conjugate(y,person=singular_person, tense=tense,mode=mode)
    derivatives.append(conjugation)
    gerundio=conjugate(y,tense='gerund')
    participio=gerundio.replace("ando","ado").replace("iendo","ido")
    derivatives.append(gerundio)
    derivatives.append(participio)
    derivatives.append(conjugation+"mos")
    derivatives.append(conjugation+"n")
    conjugation=conjugate(y,person=1, tense=tense,mode=mode)
    derivatives.append(conjugation)
    conjugation=conjugate(y,person=2, tense=tense,mode=mode)
    derivatives.append(conjugation)
    #conjugacion subjuntivo
    singular_person=1
    conjugations=conjugate(y,person=singular_person,tense=tense, mood=SUBJUNCTIVE)
    derivatives.append(conjugations)
    derivatives.append(conjugations+"mos")
    derivatives.append(conjugations+"n")
    conjugations=conjugate(y,person=2,tense=tense, mood=SUBJUNCTIVE)
    derivatives.append(conjugations)
    conjugations=conjugate(y,person=3,tense=tense, mood=SUBJUNCTIVE)
    derivatives.append(conjugations)
    #conjugacion condicional
    singular_person=3
    tense="conditional"
    mode="indicative"
    conjugationc=conjugate(y,person=singular_person, tense=tense,mode=mode)
    derivatives.append(conjugationc)
    derivatives.append(conjugationc+"mos")
    derivatives.append(conjugationc+"n")
    conjugationc=conjugate(y,person=1, tense=tense,mode=mode)
    derivatives.append(conjugation)
    conjugationc=conjugate(y,person=2, tense=tense,mode=mode)
    derivatives.append(conjugationc)
    singular_person=1
    tense_past_simple="preterite"
    conjugationp1=conjugate(y,person=singular_person, tense=tense_past_simple)
    derivatives.append(conjugationp1)
    stem=conjugationp1[:-1]
    derivatives.append(stem+"amos")
    derivatives.append(stem+"aron")
    conjugationp1=conjugate(y,person=2, tense=tense_past_simple)
    derivatives.append(conjugationp1)
    conjugationp1=conjugate(y,person=3, tense=tense_past_simple)
    derivatives.append(conjugationp1)
    #conjugacion pretérito imperfecto
    tense_past_simple="imperfect"
    conjugationp2=conjugate(y,person=singular_person, tense=tense_past_simple)
    derivatives.append(conjugationp2)
    derivatives.append(conjugationp2+"mos")
    derivatives.append(conjugationp2+"n")
    conjugationp2=conjugate(y,person=2, tense=tense_past_simple)
    derivatives.append(conjugationp2)
    conjugationp2=conjugate(y,person=3, tense=tense_past_simple)
    derivatives.append(conjugationp2)
    #conjugacion futuro
    tense_f="future"
    conjugationf=conjugate(y,person=singular_person, tense=tense_f)
    derivatives.append(conjugationf)
    derivatives.append(conjugationf+"mos")
    stem=conjugationf[:-1]
    derivatives.append(stem+"an")
    conjugationf=conjugate(y,person=2, tense=tense_f)
    derivatives.append(conjugationf)
    conjugationf=conjugate(y,person=3, tense=tense_f)
    derivatives.append(conjugationf)
    for palabra in derivatives:
                palabra=eliminar_dobles(palabra)
    return derivatives


def conjugacion_er(y):
    derivatives=[]
    derivatives.append(y)
    singular_person=3
    tense="present"
    mode="indicative"
    conjugation=conjugate(y,person=singular_person, tense=tense,mode=mode)
    stem=conjugation[:-1]
    #participio
    gerundio=conjugate(y,tense='gerund')
    participio=gerundio.replace("ando","ado").replace("iendo","ido")
    derivatives.append(gerundio)
    derivatives.append(participio)
    derivatives.append(conjugation)
    derivatives.append(conjugation+"mos")
    derivatives.append(conjugation+"n")
    conjugation=conjugate(y,person=1, tense=tense,mode=mode)
    derivatives.append(conjugation)
    conjugation=conjugate(y,person=2, tense=tense,mode=mode)
    derivatives.append(conjugation)
    #conjugacion subjuntivo
    singular_person=1
    conjugations=conjugate(y,person=singular_person,tense=tense, mood=SUBJUNCTIVE)
    derivatives.append(conjugations)
    derivatives.append(conjugations+"mos")
    derivatives.append(conjugations+"n")
    conjugations=conjugate(y,person=2,tense=tense, mood=SUBJUNCTIVE)
    derivatives.append(conjugations)
    conjugations=conjugate(y,person=3,tense=tense, mood=SUBJUNCTIVE)
    derivatives.append(conjugations)
    #conjugacion condicional
    singular_person=3
    tense="conditional"
    mode="indicative"
    conjugationc=conjugate(y,person=singular_person, tense=tense,mode=mode)
    derivatives.append(conjugationc)
    derivatives.append(conjugationc+"mos")
    derivatives.append(conjugationc+"n")
    conjugationc=conjugate(y,person=1, tense=tense,mode=mode)
    derivatives.append(conjugation)
    conjugationc=conjugate(y,person=2, tense=tense,mode=mode)
    derivatives.append(conjugationc)
    #conjugacion pasado simple
    singular_person=1
    tense_past_simple="preterite"
    conjugationp1=conjugate(y,person=singular_person, tense=tense_past_simple)
    derivatives.append(conjugationp1)
    stem=conjugationp1[:-1]
    conjugationp1=conjugate(y,person=2, tense=tense_past_simple)
    derivatives.append(conjugationp1)
    conjugationp1=conjugate(y,person=3, tense=tense_past_simple)
    derivatives.append(conjugationp1)
    #conjugacion pretérito imperfecto
    tense_past_simple="imperfect"
    conjugationp2=conjugate(y,person=singular_person, tense=tense_past_simple)
    derivatives.append(conjugationp2)
    conjugationp2=conjugate(y,person=2, tense=tense_past_simple)
    derivatives.append(conjugationp2)
    conjugationp2=conjugate(y,person=3, tense=tense_past_simple)
    derivatives.append(conjugationp2)
    #conjugacion futuro
    tense_f="future"
    conjugationf=conjugate(y,person=singular_person, tense=tense_f)
    derivatives.append(conjugationf+"mos")
    stem=conjugationf[:-1]
    derivatives.append(stem+"an")
    conjugationf=conjugate(y,person=2, tense=tense_f)
    derivatives.append(conjugationf)
    for palabra in derivatives:
                palabra=eliminar_dobles(palabra)
    return derivatives


def conjugacion_ir(y):
    derivatives=[]
    derivatives.append(y)
    singular_person=3
    tense="present"
    mode="indicative"
    conjugation=conjugate(y,person=singular_person, tense=tense,mode=mode)
    stem=conjugation[:-1]
    #participio
    gerundio=conjugate(y,tense='gerund')
    participio=gerundio.replace("ando","ado").replace("iendo","ido")
    derivatives.append(gerundio)
    derivatives.append(participio)
    derivatives.append(conjugation)
    conjugation1=conjugation[:-1]
    derivatives.append(conjugation1+"imos")
    derivatives.append(conjugation+"n")
    conjugation=conjugate(y,person=1, tense=tense,mode=mode)
    derivatives.append(conjugation)
    conjugation=conjugate(y,person=2, tense=tense,mode=mode)
    derivatives.append(conjugation)
    #conjugacion subjuntivo
    singular_person=1
    conjugations=conjugate(y,person=singular_person,tense=tense, mood=SUBJUNCTIVE)
    derivatives.append(conjugations)
    derivatives.append(conjugations+"mos")
    derivatives.append(conjugations+"n")
    conjugations=conjugate(y,person=2,tense=tense, mood=SUBJUNCTIVE)
    derivatives.append(conjugations)
    conjugations=conjugate(y,person=3,tense=tense, mood=SUBJUNCTIVE)
    derivatives.append(conjugations)
    #conjugacion condicional
    singular_person=3
    tense="conditional"
    mode="indicative"
    conjugationc=conjugate(y,person=singular_person, tense=tense,mode=mode)
    derivatives.append(conjugationc)
    derivatives.append(conjugationc+"mos")
    derivatives.append(conjugationc+"n")
    conjugationc=conjugate(y,person=1, tense=tense,mode=mode)
    derivatives.append(conjugation)
    conjugationc=conjugate(y,person=2, tense=tense,mode=mode)
    derivatives.append(conjugationc)
    #conjugacion pasado simple
    singular_person=1
    tense_past_simple="preterite"
    conjugationp1=conjugate(y,person=singular_person, tense=tense_past_simple)
    derivatives.append(conjugationp1)
    stem=conjugationp1[:-1]
    conjugationp1=conjugate(y,person=2, tense=tense_past_simple)
    derivatives.append(conjugationp1)
    conjugationp1=conjugate(y,person=3, tense=tense_past_simple)
    derivatives.append(conjugationp1)
    #conjugacion pretérito imperfecto
    tense_past_simple="imperfect"
    conjugationp2=conjugate(y,person=singular_person, tense=tense_past_simple)
    derivatives.append(conjugationp2)
    conjugationp2=conjugate(y,person=2, tense=tense_past_simple)
    derivatives.append(conjugationp2)
    conjugationp2=conjugate(y,person=3, tense=tense_past_simple)
    derivatives.append(conjugationp2)
    #conjugacion futuro
    tense_f="future"
    conjugationf=conjugate(y,person=singular_person, tense=tense_f)
    derivatives.append(conjugationf+"mos")
    stem=conjugationf[:-1]
    derivatives.append(stem+"an")
    conjugationf=conjugate(y,person=2, tense=tense_f)
    derivatives.append(conjugationf)
    for palabra in derivatives:
                palabra=eliminar_dobles(palabra)
    return derivatives

def obtener_raiz(palabra):
  return palabra[:-1]
  return palabra

def eliminar_dobles(palabra):
    patron = r'(\w)\1'
    palabra_sin_dobles = re.sub( r'([aeiou])\1+',r'\1', palabra,flags=re.IGNORECASE)
    return palabra_sin_dobles

def save_dict(pet,filename):
    with open(filename, 'w') as f:
        f.write(json.dumps(pet))
def es_compuesta(palabra):
    return ' ' in palabra
def der_sufijos_ia(palabra):
    derivatives=[]
    stem=obtener_raiz(palabra)
    derivatives.append(stem+"ta")
    derivatives.append(stem+"tas")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives
def der_sufijos_io(palabra):
    derivatives=[]
    stem=obtener_raiz(palabra)
    derivatives.append(stem+"to")
    derivatives.append(stem+"tos")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives
def der_sufijos_a(palabra):
    derivatives=[]
    stem=obtener_raiz(palabra)
    derivatives.append(stem+"as")
    derivatives.append(stem+"ita")
    derivatives.append(stem+"itas")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives
def der_sufijos_o(palabra):
    derivatives=[]
    stem=obtener_raiz(palabra)
    derivatives.append(stem+"os")
    derivatives.append(stem+"ito")
    derivatives.append(stem+"itos")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives
def der_sufijos_e(palabra):
    derivatives=[]
    stem=palabra
    derivatives.append(stem+"s")
    derivatives.append(stem+"cito")
    derivatives.append(stem+"citos")
    derivatives.append(stem+"cita")
    derivatives.append(stem+"citas")
    for palabra in derivatives:
                palabra=eliminar_dobles(palabra)
    return derivatives
def der_sufijos_ca(palabra):
    derivatives=[]
    stem=obtener_raiz(palabra)
    stem=stem[:-1]
    derivatives.append(stem+"ca")
    derivatives.append(stem+"cas")
    derivatives.append(stem+"quita")
    derivatives.append(stem+"quitas")
    return derivatives
def der_sufijos_za(palabra):
    derivatives=[]
    stem=obtener_raiz(palabra)
    stem=stem[:-1]
    derivatives.append(stem+"za")
    derivatives.append(stem+"zas")
    derivatives.append(stem+"cita")
    derivatives.append(stem+"citas")
    return derivatives
def der_sufijos_zo(palabra):
    derivatives=[]
    stem=obtener_raiz(palabra)
    stem=stem[:-1]
    derivatives.append(stem+"zo")
    derivatives.append(stem+"zos")
    derivatives.append(stem+"cito")
    derivatives.append(stem+"citos")
    return derivatives
def der_sufijos_co(palabra):
    derivatives=[]
    stem=obtener_raiz(palabra)
    stem=stem[:-1]
    derivatives.append(stem+"co")
    derivatives.append(stem+"cos")
    derivatives.append(stem+"quito")
    derivatives.append(stem+"quitos")
    for palabra in derivatives:
                palabra=eliminar_dobles(palabra)
    return derivatives
def der_sufijos_j(palabra):
    derivatives=[]
    stem=palabra
    derivatives.append(stem+"ito")
    derivatives.append(stem+"ita")
    derivatives.append(stem+"itas")
    derivatives.append(stem+"itos")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives
def der_sufijos_l(palabra):
    derivatives=[]
    stem=palabra
    derivatives.append(stem+"ito")
    derivatives.append(stem+"ita")
    derivatives.append(stem+"itas")
    derivatives.append(stem+"itos")
    derivatives.append(stem+"cito")
    derivatives.append(stem+"citos")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives
def der_sufijos_n(palabra):
    derivatives=[]
    stem=palabra
    derivatives.append(stem+"es")
    derivatives.append(stem+"cito")
    derivatives.append(stem+"cita")
    derivatives.append(stem+"citas")
    derivatives.append(stem+"citos")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives

def der_sufijos_or(palabra):
    derivatives=[]
    stem=palabra
    derivatives.append(stem+"cito")
    derivatives.append(stem+"citos")
    derivatives.append(stem+"es")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives
def der_sufijos_nes(palabra):
    derivatives=[]
    stem=palabra
    derivatives.append(stem+"cito")
    derivatives.append(stem+"citos")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives
def der_sufijos_z(palabra):
    derivatives=[]
    stem=obtener_raiz(palabra)
    derivatives.append(stem+"ces")
    derivatives.append(stem+"citos")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives

def der_sufijos_ga(palabra):
    derivatives=[]
    stem=obtener_raiz(palabra)
    stem=stem[:-1]
    derivatives.append(stem+"ga")
    derivatives.append(stem+"gas")
    derivatives.append(stem+"guita")
    derivatives.append(stem+"guitas")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives
def der_sufijos_go(palabra):
    derivatives=[]
    stem=obtener_raiz(palabra)
    stem=stem[:-1]
    derivatives.append(stem+"go")
    derivatives.append(stem+"gos")
    derivatives.append(stem+"guito")
    derivatives.append(stem+"guitos")
    for palabra in derivatives:
        palabra=eliminar_dobles(palabra)
    return derivatives
palabras=["pie","alfombra","beber","lapiz","rico","enojado","niño","mano izquierda","facil",
          "corazon","fonoaudiologa","cicatriz", "rugoso", "hacer pis","ordenado","lleno", "roto",
          "rectangulo","pequeño","comer","numeros","trapecio","abajo","veloz","frio","calor","silla de ruedas"]

a = load_pet("contextos_03_03_2023.json")






lnueva=[]
for keys in a:
    l = []
    for x in a[keys]:
        y = x.encode('latin-1').decode('utf-8')
        l.append(y)
        lnueva.append(y)
    a[keys] = l

print(lnueva)

print('longitud de contextos', len(lnueva))

result = []
for item in lnueva:
    if item not in result:
        result.append(item)
print(result)
print('long de contextos sin repetidos', len(result))

diccionario_derivadas = {}
#L = df.columns.values.tolist()
#print(L)
resultp = []
an={}
Cont=0
for keys in a:
 palabras = a[keys]
 for y in palabras:
    Cont=Cont+1
    #derivatives=[]
    #if y not in resultp and not es_compuesta(y) and len(y) > 2:
    if  not es_compuesta(y) and len(y) > 2:
       derivatives=[]
       derivatives.append(y)
       resultp.append(y)
       #time.sleep(10)
       stem=obtener_raiz(y)
       if y.endswith("j"):
            derivatives=der_sufijos_j(y)
            diccionario_derivadas[y] =derivatives
       elif y.endswith("l"):
            derivatives=der_sufijos_l(y)
            diccionario_derivadas[y] =derivatives
       elif y.endswith("e") or y.endswith("é"):
              derivatives=der_sufijos_e(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("co"):
              derivatives=der_sufijos_co(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("ca"):
              derivatives=der_sufijos_ca(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("ga"):
              derivatives=der_sufijos_ga(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("go"):
              derivatives=der_sufijos_go(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("za"):
              derivatives=der_sufijos_za(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("zo"):
              derivatives=der_sufijos_zo(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("ia"):
              derivatives=der_sufijos_ia(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("io"):
              derivatives=der_sufijos_io(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("a") or y.endswith("á"):
              derivatives=der_sufijos_a(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("o") or y.endswith("ó"):
              derivatives=der_sufijos_o(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("n"):
              derivatives=der_sufijos_n(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("or"):
              derivatives=der_sufijos_or(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("z"):
              derivatives=der_sufijos_z(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("ar"):
       #or  y.endswith("ir"):
            derivatives=conjugacion_ar(y)
            diccionario_derivadas[y] =derivatives
       elif y.endswith("er"):
        #or  y.endswith("ir"):
              derivatives=conjugacion_er(y)
              diccionario_derivadas[y] =derivatives
       elif y.endswith("ir"):
              derivatives=conjugacion_ir(y)
              diccionario_derivadas[y] =derivatives
       else:
              derivatives=[]
              stem=y
              derivatives.append(stem)
              #print(' ')
              #print('sin derivadas por ahora  ',stem)
              diccionario_derivadas[y] =derivatives
    #else:
         #print(y,'es compuesta')
         #derivatives.append(y)
         #diccionario_derivadas[y] =derivatives
    elif     es_compuesta(y) or len(y) <= 2:
          derivatives=[]
          derivatives.append(y)
          diccionario_derivadas[y] =derivatives
          #an[keys] = diccionario_derivadas
          #print(keys)
          #time.sleep(2)

print('resultp',resultp)
print('cantidad de palabras diccionario de entrada',Cont)
# terminan con s

for keys in a:
  palabras = a[keys]
  for y in palabras:
     if y.endswith("nes") and not es_compuesta(y):
        stem=obtener_raiz(y)
        stem1=obtener_raiz(stem)
        #derivatives=[]
        #derivatives.append(y)
        derivatives=der_sufijos_nes(stem1)
        diccionario_derivadas[y] =derivatives
     elif y.endswith("s") and not es_compuesta(y):
        stem=obtener_raiz(y)
        #derivatives=[]
        if stem.endswith("e"):
              derivatives=der_sufijos_e(stem)
              diccionario_derivadas[y] =derivatives
        elif stem.endswith("co"):
              derivatives=der_sufijos_co(stem)
              diccionario_derivadas[y] =derivatives
        elif stem.endswith("ca"):
              derivatives=der_sufijos_ca(stem)
              diccionario_derivadas[y] =derivatives
        elif stem.endswith("ga"):
              derivatives=der_sufijos_ga(stem)
              diccionario_derivadas[y] =derivatives
        elif stem.endswith("go"):
              derivatives=der_sufijos_go(stem)
              diccionario_derivadas[y] =derivatives
        elif y.endswith("za"):
              derivatives=der_sufijos_za(y)
              diccionario_derivadas[y] =derivatives
        elif y.endswith("zo"):
              derivatives=der_sufijos_zo(y)
              diccionario_derivadas[y] =derivatives
        elif stem.endswith("ia"):
              derivatives=der_sufijos_ia(stem)
              diccionario_derivadas[y] =derivatives
        elif stem.endswith("io"):
              derivatives=der_sufijos_io(stem)
              diccionario_derivadas[y] =derivatives
        elif stem.endswith("a") or stem.endswith("á"):
              derivatives=der_sufijos_a(stem)
              diccionario_derivadas[y] =derivatives
        elif stem.endswith("o") or stem.endswith("ó"):
              derivatives=der_sufijos_o(stem)
              diccionario_derivadas[y] =derivatives

an[keys] = diccionario_derivadas
     #print(y,diccionario_derivadas[y])
     #time.sleep(10)

print(diccionario_derivadas["beber"])
time.sleep(10)
print(diccionario_derivadas["igual"])

keys_unicas=set(a.keys())
print(keys_unicas)
#print('lenunicas',len(keys_unicas))
#nuevo_a={key:a[key] for key in keys_unicas}

#for key, defi in a.items():
    #nuevo_a[key] =list(set(defi))

with open("pictos_derivados_9septiembre.json",'w',encoding='utf-8') as archivo:
    json.dump(an,archivo,ensure_ascii=False,indent=4)
#save_dict(a, filename)


total_palabras=0
histo=[]
for keys in diccionario_derivadas:
    L=diccionario_derivadas[keys]
    M=len(L)
    histo.append(M)
    total_palabras=total_palabras + M
total=total_palabras
print("total palabras diccionario derivadas", total)
print(histo)
#len(diccionario_derivadas[alfombra])
#for keys in diccionario_derivadas:
    #print(keys)
doc=Document()
cantkeys=0
for keys in diccionario_derivadas:
    #print(keys)
    doc.add_paragraph(keys)
    #time.sleep(10)
    cantkeys=cantkeys+1
#print(cantkeys)
#doc.save('contextos.docx')







